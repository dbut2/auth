// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO Users DEFAULT VALUES RETURNING ID
`

func (q *Queries) CreateUser(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, createUser)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getCodeUser = `-- name: GetCodeUser :one

SELECT u.ID FROM Users u

INNER JOIN Codes c on c.UserID = u.ID

WHERE c.Code = $1

LIMIT 1
`

func (q *Queries) GetCodeUser(ctx context.Context, code string) (int32, error) {
	row := q.db.QueryRow(ctx, getCodeUser, code)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getToken = `-- name: GetToken :one

SELECT Token FROM UserTokens ut

WHERE ut.Provider = $1
  AND ut.ProviderIdentity = $2

LIMIT 1
`

type GetTokenParams struct {
	Provider         string
	Provideridentity string
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getToken, arg.Provider, arg.Provideridentity)
	var token pgtype.Text
	err := row.Scan(&token)
	return token, err
}

const getUser = `-- name: GetUser :one

SELECT u.ID FROM Users u

INNER JOIN UserTokens ut on ut.UserID = u.ID

WHERE ut.Provider = $1
  AND ut.ProviderIdentity = $2

LIMIT 1
`

type GetUserParams struct {
	Provider         string
	Provideridentity string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, getUser, arg.Provider, arg.Provideridentity)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const storeCode = `-- name: StoreCode :exec

INSERT INTO Codes (Code, UserID) VALUES ($1, $2)
`

type StoreCodeParams struct {
	Code   string
	Userid int32
}

func (q *Queries) StoreCode(ctx context.Context, arg StoreCodeParams) error {
	_, err := q.db.Exec(ctx, storeCode, arg.Code, arg.Userid)
	return err
}

const storeToken = `-- name: StoreToken :exec

INSERT INTO UserTokens (Provider, ProviderIdentity, UserID, Token)

VALUES ($1, $2, $3, $4)

ON CONFLICT (Provider, ProviderIdentity)
DO UPDATE SET Token = $4
`

type StoreTokenParams struct {
	Provider         string
	Provideridentity string
	Userid           int32
	Token            pgtype.Text
}

func (q *Queries) StoreToken(ctx context.Context, arg StoreTokenParams) error {
	_, err := q.db.Exec(ctx, storeToken,
		arg.Provider,
		arg.Provideridentity,
		arg.Userid,
		arg.Token,
	)
	return err
}
